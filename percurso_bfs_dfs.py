# -*- coding: utf-8 -*-
"""Percurso BFS_DFS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Vp_YuXPAcvVaOmZpUkanpN7YK_srImev
"""

from collections import defaultdict, deque

#tranformar uma lista em dicionário
#pego uma chave depois no seu valor posso add uma lista de vértices

class Graph:
    def __init__(self):
        self.graph = defaultdict(list) #criando o dic pra add lista

    def addAresta(self, u, v):
        self.graph[u].append(v) #o meu vértice U tem aresta com o V, faço isso como se fosse uma lista

def bfs(graph, node): #passa o grafo e o nó que quero iniciar, se for árvore sempre é da raiz
    visitado, fila = set(), deque(node) #armazena os nós visistados em um set pq ele n aceita valores repetidos, assim só visito um nó por vez
    #fila será um deque do nó 
    visitado.add(node) #já adiciono o nó que eu partir

    while fila: #enquanto tiver elementos na minha fila não percorridos
        vertice = fila.popleft() #tira o primeiro da lista e mostra ele
        print(vertice)

        for vizinho in graph[vertice]: #vou para os valores do meu nó, os filhos dele
            if vizinho not in visitado: #eles já foram visitados?
                visitado.add(vizinho) #add nos visitados
                fila.append(vizinho) #adiciono ele na lista para partir dele dps, percorrendo na ordem

    return

def dfs(visitado, graph, node): 
    if node not in visitado: #se ainda não percorri esse nó
        print(node) #mostra ele
        visitado.add(node)
        for vizinho in graph[node]: #vou para os filhos dele
            dfs(visitado, graph, vizinho) #faço o memso processo e qnd acabar, volto nos outros vértices

    return

if __name__ == '__main__': #abaixo daqui ele nao vai executar qnd chamarmos esse arqv para executar a função. é mais teste mesmo
    g = Graph() #chamando a classe Graph

    g.addAresta('A', 'B') #do A vai para o B
    g.addAresta('A', 'C') #do A vai para o C
    g.addAresta('B', 'D')
    g.addAresta('B', 'E')
    g.addAresta('C', 'F')
    g.addAresta('D', '')
    g.addAresta('E', 'F')
    g.addAresta('F', '')

    visitado = set()
    

    print(g.graph) #se fosse só o g ele iria mostrar só o endereço, com o graph ele chama a função construtora e printa
    bfs(g.graph, 'A')

    dfs(visitado, g.graph, 'A')